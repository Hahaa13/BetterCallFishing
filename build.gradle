plugins {
    id 'java'
}

group = 'xyz.sherhsnyaga'
version = '2.0.0-ALPHA'
repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    implementation "net.kyori:adventure-text-minimessage:4.14.0"

    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    archiveFileName = "${rootProject.name}-${version}-b${getBuildVersion()}.jar"
}

Integer getBuildVersion() {
    Integer version = 1
    def buildInfoFile = file("./.gradle/build.properties")

    if (!buildInfoFile.exists()) {
        buildInfoFile.createNewFile()
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter('./.gradle/build.properties'))
        bufferedWriter.write("count=1")
        bufferedWriter.close()
    }
    else {
        Properties properties = new Properties()
        FileInputStream stream = new FileInputStream(buildInfoFile)
        properties.load(stream)
        version = Integer.parseInt(properties['count'] as String) + 1
        properties['count'] = version.toString()
        properties.store(buildInfoFile.newWriter(), null)
        stream.close()
    }

    return version
}